{"version":3,"sources":["sortAlgorithms/MergesortAlgorithm.js","sortAlgorithms/QuicksortAlgorithm.js","sortAlgorithms/BubblesortAlgorithm.js","sortAlgorithms/SelectionsortAlgorithm.js","SortVisualizer/SortVisualizer.jsx","sortAlgorithms/InsertionsortAlgorithm.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxiliaryArray","slice","mergeSort","mainArray","startIndex","endIndex","middleIndex","Math","floor","k","i","j","push","doMerge","length","getQuickSortAnimations","auxillaryArray","quickSort","pivotIndex","pivot","swap","partitionArray","firstIndex","secondIndex","temp","getBubblesortAnimations","N","bubbleSort","getSelectionsortAnimations","selectionSort","MAX_ARRAY","NUMBER_OF_ARRAY_BARS","SortingVisualizer","props","state","this","checkdisplay","initalSet","window","innerWidth","innerHeight","min","max","random","setState","location","reload","arrayBars","document","getElementsByClassName","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","barIndex","barStyle","key","insertionSort","getInsertionsortAnimations","isColorChange","className","onClick","resetArray","map","value","idx","width","fontSize","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60363c20.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  const auxiliaryArray = array.slice();\r\n  mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSort(\r\n  mainArray,\r\n  startIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIndex === endIndex) return;\r\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSort(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\r\n  mergeSort(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\r\n  doMerge(\r\n    mainArray,\r\n    startIndex,\r\n    middleIndex,\r\n    endIndex,\r\n    auxiliaryArray,\r\n    animations\r\n  );\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIndex,\r\n  middleIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIndex;\r\n  let i = startIndex;\r\n  let j = middleIndex + 1;\r\n  while (i <= middleIndex && j <= endIndex) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIndex) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIndex) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","export function getQuickSortAnimations(array) {\r\n  let animations = [];\r\n  let auxillaryArray = array.slice();\r\n  quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n  return [animations, auxillaryArray];\r\n}\r\n\r\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n  let pivotIndex;\r\n  if (startIndex < endIndex) {\r\n    pivotIndex = partitionArray(\r\n      auxillaryArray,\r\n      startIndex,\r\n      endIndex,\r\n      animations\r\n    );\r\n    quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n    quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n  }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n  let pivot = auxillaryArray[endIndex];\r\n  let pivotIndex = startIndex;\r\n  for (let i = startIndex; i <= endIndex - 1; i++) {\r\n    animations.push([i, endIndex]);\r\n    animations.push([i, endIndex]);\r\n    if (auxillaryArray[i] <= pivot) {\r\n      //Swap the bar heights\r\n      animations.push([i, auxillaryArray[pivotIndex]]);\r\n      animations.push([pivotIndex, auxillaryArray[i]]);\r\n      swap(auxillaryArray, i, pivotIndex);\r\n      pivotIndex++;\r\n    } else {\r\n      animations.push([-1, -1]);\r\n      animations.push([-1, -1]);\r\n    }\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, 0]);\r\n  }\r\n  animations.push([0, 0]);\r\n  animations.push([0, 0]);\r\n  animations.push([0, 0]);\r\n  animations.push([0, 0]);\r\n  //Swap the bar heights\r\n  animations.push([pivotIndex, auxillaryArray[endIndex]]);\r\n  animations.push([endIndex, auxillaryArray[pivotIndex]]);\r\n  swap(auxillaryArray, pivotIndex, endIndex);\r\n  return pivotIndex;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n  let temp = auxillaryArray[firstIndex];\r\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n  auxillaryArray[secondIndex] = temp;\r\n}\r\n","export function getBubblesortAnimations(array) {\r\n  let animations = [];\r\n  let auxillaryArray = array.slice();\r\n  bubbleSort(auxillaryArray, animations);\r\n  return [animations, auxillaryArray];\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n  const N = auxillaryArray.length;\r\n  for (let i = 0; i < N - 1; i++) {\r\n    for (let j = 0; j < N - i - 1; j++) {\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      if (auxillaryArray[j] > auxillaryArray[j + 1]) {\r\n        animations.push([j, auxillaryArray[j + 1]]);\r\n        animations.push([j + 1, auxillaryArray[j]]);\r\n        swap(auxillaryArray, j, j + 1);\r\n      } else {\r\n        animations.push([-1, -1]);\r\n        animations.push([-1, -1]);\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n  let temp = auxillaryArray[firstIndex];\r\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n  auxillaryArray[secondIndex] = temp;\r\n}\r\n","export function getSelectionsortAnimations(array) {\r\n  let animations = [];\r\n  let auxillaryArray = array.slice();\r\n  selectionSort(auxillaryArray, animations);\r\n  return [animations, auxillaryArray];\r\n}\r\n\r\nfunction selectionSort(auxillaryArray, animations) {\r\n  let N = auxillaryArray.length;\r\n  for (let i = 0; i < N - 1; i++) {\r\n    let startIndex = i;\r\n    for (let j = i + 1; j < N; j++) {\r\n      animations.push([\"firstcomparision\", j, startIndex]);\r\n      animations.push([\"secondcomparision\", j, startIndex]);\r\n      if (auxillaryArray[j] < auxillaryArray[startIndex]) startIndex = j;\r\n    }\r\n    animations.push([\"swap\", startIndex, auxillaryArray[i]]);\r\n    animations.push([\"swap\", i, auxillaryArray[startIndex]]);\r\n    if (startIndex != i) swap(auxillaryArray, startIndex, i);\r\n  }\r\n}\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n  let temp = auxillaryArray[firstIndex];\r\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n  auxillaryArray[secondIndex] = temp;\r\n}\r\n","import React from \"react\";\r\nimport { getMergeSortAnimations } from \"../sortAlgorithms/MergesortAlgorithm.js\";\r\nimport { getQuickSortAnimations } from \"../sortAlgorithms/QuicksortAlgorithm.js\";\r\nimport { getInsertionsortAnimations } from \"../sortAlgorithms/InsertionsortAlgorithm.js\";\r\nimport { getBubblesortAnimations } from \"../sortAlgorithms/BubblesortAlgorithm.js\";\r\nimport { getSelectionsortAnimations } from \"../sortAlgorithms/SelectionsortAlgorithm.js\";\r\nimport \"./SortVisualizer.css\";\r\n\r\n// Change this value for the speed of the animations.\r\nlet ANIMATION_SPEED_MS = 10;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nlet NUMBER_OF_ARRAY_BARS = 20;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"#ffe400\";\r\nlet MAX_ARRAY;\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"#d50000\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Checks the display parameter , when the DOM is loaded\r\n    this.checkdisplay();\r\n    this.initalSet();\r\n  }\r\n\r\n  checkdisplay() {\r\n    //Adjusts the No of BARS and the Height of the Bars according the screen size\r\n    //Note : This is no responsive design .\r\n    if (window.innerWidth <= 767 && window.innerHeight <= 360) {\r\n      MAX_ARRAY = 200;\r\n      NUMBER_OF_ARRAY_BARS = 20;\r\n    } else if (window.innerWidth <= 767 && window.innerHeight <= 480) {\r\n      MAX_ARRAY = 350;\r\n      NUMBER_OF_ARRAY_BARS = 20;\r\n    } else if (window.innerWidth < 767) {\r\n      MAX_ARRAY = 500;\r\n      NUMBER_OF_ARRAY_BARS = 20;\r\n    } else if (window.innerWidth > 768) {\r\n      MAX_ARRAY = 600;\r\n      NUMBER_OF_ARRAY_BARS = 50;\r\n    }\r\n  }\r\n\r\n  initalSet() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, MAX_ARRAY));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  resetArray() {\r\n    window.location.reload();\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIndex, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIndex].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const [animations] = getQuickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length - 1; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\r\n      if (isColorChange === true) {\r\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        if (barOneIndex === -1) {\r\n          continue;\r\n        }\r\n\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [barIndex, newHeight] = animations[i];\r\n        if (barIndex === -1) {\r\n          continue;\r\n        }\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n  insertionSort() {\r\n    const [animations] = getInsertionsortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"firstcomparision\" ||\r\n        animations[i][0] === \"secondcomparision\";\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange === true) {\r\n        const color =\r\n          animations[i][0] === \"firstcomparision\"\r\n            ? SECONDARY_COLOR\r\n            : PRIMARY_COLOR;\r\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [temp, barIndex, newHeight] = animations[i];\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const [animations] = getBubblesortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange === true) {\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [barIndex, newHeight] = animations[i];\r\n        if (barIndex === -1) {\r\n          continue;\r\n        }\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n  selectionSort() {\r\n    const [animations] = getSelectionsortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"firstcomparision\" ||\r\n        animations[i][0] === \"secondcomparision\";\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange === true) {\r\n        const color =\r\n          animations[i][0] === \"firstcomparision\"\r\n            ? SECONDARY_COLOR\r\n            : PRIMARY_COLOR;\r\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [temp, barIndex, newHeight] = animations[i];\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"header\">\r\n          <a onClick={() => this.resetArray()}>New Array</a>\r\n          <a onClick={() => this.mergeSort()}>Merge Sort</a>\r\n          <a onClick={() => this.quickSort()}>Quick Sort</a>\r\n          <a onClick={() => this.insertionSort()}>Insertion Sort</a>\r\n          <a onClick={() => this.bubbleSort()}>Bubble Sort</a>\r\n          <a onClick={() => this.selectionSort()}>Selection Sort</a>\r\n        </div>\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                height: `${value}px`,\r\n                width: \"5px\",\r\n                color: \"transparent\",\r\n                fontSize: \"8px\",\r\n              }}\r\n            >\r\n              {value}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","export function getInsertionsortAnimations(array) {\r\n  let animations = [];\r\n  let auxillaryArray = array.slice();\r\n  insertionSort(auxillaryArray, animations);\r\n  return [animations, auxillaryArray];\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n  const N = auxillaryArray.length;\r\n  for (let i = 1; i < N; i++) {\r\n    let key = auxillaryArray[i];\r\n    let j = i - 1;\r\n    //manually pass in flag to color the \"compared\" bars\r\n    animations.push([\"firstcomparision\", j, i]);\r\n    animations.push([\"secondcomparision\", j, i]);\r\n    while (j >= 0 && auxillaryArray[j] > key) {\r\n      animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n      auxillaryArray[j + 1] = auxillaryArray[j];\r\n      j = j - 1;\r\n      if (j >= 0) {\r\n        animations.push([\"firstcomparision\", j, i]);\r\n        animations.push([\"secondcomparision\", j, i]);\r\n      }\r\n    }\r\n    animations.push([\"overwrite\", j + 1, key]);\r\n    auxillaryArray[j + 1] = key;\r\n  }\r\n}\r\n","import React from \"react\";\nimport SortVisualizer from \"./SortVisualizer/SortVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVisualizer></SortVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}